{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","herf","title","type","id","href","onClick","toggleMode","htmlfor","prototype","PropTypes","string","aboutText","Textform","React","useState","value","setvalue","speak","useSpeechSynthesis","text","setText","useSpeechRecognition","transcript","resetTranscript","isListening","setIsListening","SpeechRecognition","showAlert","browserSupportsSpeechRecognition","stopHandle","stopListening","style","Color","heading","onChange","e","target","backgroundColor","color","rows","console","log","newText","toUpperCase","toLowerCase","startListening","continuous","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setmode","setAlert","message","document","body","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5f79d962.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <li className=\"navbar-brand\" herf=\"#\">{props.title}</li>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <li className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</li>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li> */}\r\n      </ul>\r\n      {/*<form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n    </form>*/}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {title: PropTypes.string,\r\n                    aboutText: PropTypes.string}","import React, {useState} from 'react'\r\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\r\nimport { useSpeechSynthesis } from 'react-speech-kit';\r\n\r\n\r\n\r\nexport default function Textform(props)  {\r\n    const [value, setvalue] = React.useState('');\r\n    const {speak} = useSpeechSynthesis();\r\n\r\n\r\n    \r\n    const [text, setText] = useState(\"\");\r\n    const {transcript, resetTranscript } = useSpeechRecognition();\r\n    const [isListening, setIsListening] = useState();\r\n    // const microphoneRef = useRef(null);\r\n    if (!SpeechRecognition) {\r\n        props.showAlert(\"Error! Browser Not Supported.\",\"Danger\")\r\n      }\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n            return (\r\n                props.showAlert(\"Error! Browser Not Supported.\",\"Danger\"),\r\n            <div className=\"mircophone-container\" >\r\n                Browser is not Support Speech Recognition.\r\n            </div>\r\n        \r\n        );\r\n  }\r\n  else{\r\n\r\n  }\r\n  const handleListing = () => {\r\n    setIsListening(true);\r\n    SpeechRecognition.startListening({\r\n      continuous: true,\r\n    });\r\n    props.showAlert(\"Speech To Text Started Listing!\",\"Success\");\r\n  };\r\n  const stopHandle = () => {\r\n    setIsListening(false);\r\n    SpeechRecognition.stopListening();\r\n    props.showAlert(\"Speech To Text Stopped Listing!\",\"Success\");\r\n};\r\n  const handleReset = () => {\r\n      stopHandle();\r\n      resetTranscript();\r\n      props.showAlert(\"Text Area Cleared!\",\"Success\");\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n\r\n    const handleUpClick = ()=>{\r\n        console.log(\"Uppercase Was Clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UPPERCASE!\",\"Success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        console.log(\"Lowercase Was Clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to LOWERCASE!\",\"Success\");\r\n    }\r\n    \r\n    const handleOnChange = (event)=>{\r\n        console.log(\"On Change\");\r\n        setText(event.target.value)\r\n    }\r\n    \r\n    const handleClearClick = ()=>{\r\n        console.log(\"Clear Was Clicked\");\r\n        let newText ='';\r\n        setText(newText)\r\n    }\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n    //setText= (setText);\r\n    return (\r\n        <>\r\n        <div className=\"container\"style={{Color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text, value} onChange={handleOnChange, (e) => setvalue(e.target.value)} style={{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-dark mx-2\"onClick={handleUpClick}>UPPERCASE</button>\r\n            <button className=\"btn btn-dark mx-2\"onClick={handleLoClick}>LOWERCASE</button>\r\n            <button className=\"btn btn-dark mx-2 my-2 \"onClick={handleClearClick}>CLEAR</button>\r\n            <button className=\"btn btn-dark mx-2 my-2 \"onClick={handleListing}>START STT</button>\r\n            <button className=\"btn btn-dark mx-2 my-2 \"onClick={() => speak ({text: value})  }>PLAY</button>\r\n            \r\n            <div className=\"microphone-status\">\r\n                {isListening ? \"Listening.........\" : <h3>\"Click Start To Listening...\"</h3>}\r\n            </div>\r\n            {isListening && (\r\n                <div>\r\n            <button className=\"btn btn-dark mx-2\"onClick={stopHandle}>STOP</button>\r\n            <button className=\"btn btn-dark mx-2\"onClick={handleReset}>RESET</button>\r\n            </div>\r\n            )}\r\n        </div>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={transcript} style={{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <div className=\"container my-5\">\r\n            <h2> Your text summary  </h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minuter To Read</p>\r\n            <h2>Preview</h2>\r\n            <p className=\"container my-3\">{text.length>0?text:\"Enter something above to preview here!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert--${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize (props.alert.type)}</strong>: {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Alert","import { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\n// import Speech from './components/Tts';\n\nfunction App() {\n    const [mode, setmode] = useState('light');\n    const [alert, setAlert] = useState(null)\n    const showAlert = (message, type)=>{\n        setAlert({\n            msg: message,\n            type: type\n        })\n    }\n    const toggleMode = ()=>{\n        if(mode === 'dark'){\n            setmode('light');\n            document.body.style.backgroundColor = 'white';\n            showAlert(\"Light mode has been enabled\", \"success\");\n            setInterval(() => {\n                document.title = 'TexTer - Light Mode'\n            }, 1000);\n        }\n        else{\n            setmode('dark')\n            document.body.style.backgroundColor = 'black';\n            showAlert(\"Dark mode has been enabled\", \"success\");\n            setInterval(() => {\n                document.title = 'TexTer - Dark Mode'\n            }, 1000);\n        }\n    }\n    return (\n        <>\n        {/* <Router> */}\n        <Navbar title=\"TexTer\" aboutText=\"About US\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert = {alert} />\n        <div className=\"container my-3\" >\n        {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <Textform showAlert={showAlert} heading=\"Enter The Text To Analyze Below\" mode={mode}  />\n          {/* </Route> */}\n        {/* </Switch> */}\n        {/*<About></About>*/}\n        {/* <Speech /> */}\n        </div>\n        {/* </Router> */}\n        </>\n    )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}